<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ksh.dabang.repository.RoomRepository">

	<select id="findAll" resultType="com.ksh.dabang.model.room.Room">
		select * from room 
	</select>
	
	<select id="findByroomId" resultType="com.ksh.dabang.model.room.dto.RespRoomDto">
		select r.roomId, r.roomType, r.addr, r.detailAddr, r.dealType, r.yearRent, r.deposit, r.monthRent, r.dealRent, r.areaP, r.areaM, 
		r.floor, r.moveDay, r.mCost, r.parking, r.elevator, r.lof, r.title, r.content, r.createDate, r.hostId, r.agentId, r.lat, r.lng, 
		u.typeName, u.phone, u.name 
		from room r  left outer join user u 
								  on r.agentId = u.userId
								  
		where r.roomId = #{roomId}	
	</select>
	
	<select id="findAllpics" resultType="com.ksh.dabang.model.room.Room_pic">
		select * from room_pic where roomId = #{roomId}
	</select>
	
	
	
	<select id="findAlloption" resultType="com.ksh.dabang.model.room.Options">
		select op.optionId, op.optionName, op.optionType
		from room_option rop inner join options op 
		on rop.optionId = op.optionId 
		where roomId = #{roomId}
	</select>
	
	<insert id="upload">
		insert into room(roomType, addr, detailAddr, jibunAddr, dealType, yearRent, deposit, monthRent, dealRent, areaP, areaM, 
		floor, moveDay, mCost, parking, elevator, lof, title, content, createDate, hostId, lat, lng) 
		values(#{roomType}, #{addr}, #{detailAddr}, #{jibunAddr}, #{dealType}, #{yearRent}, #{deposit}, #{monthRent}, #{dealRent}, #{areaP}, #{areaM}, 
		#{floor}, #{moveDay}, #{mCost}, #{parking}, #{elevator}, #{lof}, #{title}, #{content}, now(), #{hostId}, #{lat}, #{lng})
	</insert>
	
	<select id="uploadSelectKey" resultType="int">
		select max(roomId) from room		
	</select>
	<insert id="saveOption">
		insert into room_option(roomId, optionId) values (#{selectKey}, #{optionOne})
	</insert>
	<insert id="saveRoomPic">
		insert into room_pic(roomId, picId, picName, createDate) 
		values(#{selectKey}, #{num}, #{OnepicName}, now())
	</insert>
	
	<insert id="dealBoardWrite">
		insert into post_deal (roomId, hostId, jibunAddr, createDate) 
		values(#{selectKey}, #{hostId}, #{jibunAddr}, now())
	</insert>
	
	<select id="findAllroomAppr" resultType="com.ksh.dabang.model.room.dto.RespRoomApprDto"> 
		select pd.postId, pd.title, pd.roomId, pd.jibunAddr, pd.createDate, pd.confirmYN, u.name 
		from post_deal pd left outer join user u 
		on pd.hostId = u.userId 
		order by pd.postId 
		desc limit #{pageLimit}, 10  
	</select>
	
	<update id="roomApprove">
		update room set agentId = #{agentId} where roomId = #{roomId}
	</update>
	
	<update id="updatePostdeal">
		update post_deal set agentId = #{agentId}, confirmYN = 'Y', confirmDate = now() where roomId = #{roomId}
	</update>
	
	<select id="findBySearchList" resultType="com.ksh.dabang.model.room.dto.RespSearchListDto">
		<![CDATA[
		select room.roomId, roomType, room.addr, detailAddr, dealType, yearRent, deposit, monthRent, dealRent,
			   areaP, areaM, floor, moveDay, mCost, parking, elevator, lof, room.title, content, room.createDate, 
			   room.hostId, room.agentId, lat, lng, picName, likeId
	      from room left outer join room_pic
								on room_pic.roomId = room.roomId
							   and room_pic.picId = 1 
                               
					left outer join ( select roomId, likeId
										from like_room
									   where userId = #{userId}
									 ) like_room
								 on like_room.roomId = room.roomId
                                 
					left outer join post_deal
						         on post_deal.roomId = room.roomId
								 
	     where room.addr like CONCAT('%',#{keyword},'%') 
           and post_deal.confirmYN = 'Y'	    
	       and (roomType like #{roomType1}	
	       		 or roomType like #{roomType2} 
	       		 or roomType like #{roomType3} 
	       		 or roomType like #{roomType4} 
	       		 or roomType like #{roomType5} 
	       	   )   			    
	       and (dealType like #{dealType1}	
	       		 or dealType like #{dealType2} 
	       		 or dealType like #{dealType3}
	       	   )
	   order by roomId desc
    	  limit #{page},24
 	 	 ]]>
	</select>
	
	<select id="totalCount" resultType="int">
	    <![CDATA[
	    select count(*) 
	      from room
	     where roomId > 0
	    ]]>
    </select>
	

	<!-- 서하 최근 본 방 저장하기 -->	
	<insert id="saveToday">
		insert into today_recode(roomId,userId) value (#{roomId},#{userId} );
	</insert>
	
	<!-- 해당 룸 올린 공인중개사 찾기 -->
	<select id="findAgent" resultType="com.ksh.dabang.model.room.dto.RespOtherRoomDto">
		select * from room where roomId = #{roomId} 
    </select>
	
	<!-- 공인중개사의 다른 방 찾기 -->
	<select id="findByOtherRoom" resultType="com.ksh.dabang.model.room.dto.RespOtherRoomDto">
		select * from room,room_pic where room.roomId=room_pic.roomId and room.agentId = #{agentId} group by room.roomId limit 0,3 
    </select>
    
    <!-- 관심목록 뿌리기 -->
    <select id="findLikeRoom" resultType="com.ksh.dabang.model.room.dto.RespLikeRoomDto">
		select * from user,like_room,room,room_pic where user.userId = like_room.userId and like_room.roomId = room.roomId and room.roomId = room_pic.roomId and user.userId=#{userId} group by room.roomId limit 0,50 
    </select>
    
     <!-- 관심목록 갯수 구하기-->
    <select id="findLikeRoomCount" resultType="int">
		select count(distinct(room.roomId))  from user,like_room,room,room_pic where user.userId = like_room.userId and like_room.roomId = room.roomId and room.roomId = room_pic.roomId and user.userId=#{userId} limit 0,50
    </select>
    
		
</mapper>
